tosca_definitions_version: alien_dsl_3_0_0

metadata:
  template_name: eflows4hpc.topologies.MinimalWorkflow
  template_version: 0.1.0-SNAPSHOT
  template_author: loicalbertin

description: ""

imports:
  - yorc-types:1.1.0
  - tosca-normative-types:1.0.0-ALIEN20
  - dls.ansible:1.0.0-SNAPSHOT
  - alien-base-types:3.0.0
  - pycomps.ansible:1.0.0-SNAPSHOT

topology_template:
  inputs:
    dls_api_username:
      type: string
      required: true
    dls_api_password:
      type: string
      required: true
  node_templates:
    PyCOMPSJob:
      metadata:
        a4c_edit_x: 245
        a4c_edit_y: "-239"
      type: pycomps.ansible.nodes.PyCOMPSJob
      properties:
        pycomps_endpoint: "amdlogin.bsc.es"
        num_nodes: 2
        data_path: "/home/bsc44/bsc44070/dls_transfert/data/"
        command: "~/wordcount_blocks/src/wordcount_blocks.py"
        arguments:
          - "${DATA_PATH}/data.txt"
          - "${DATA_PATH}/result.txt"
          - 3000
      requirements:
        - dependsOnDlsdagStageInDataFeature:
            type_requirement: dependency
            node: StageInData
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    StageInData:
      metadata:
        a4c_edit_x: 248
        a4c_edit_y: "-346"
      type: dls.ansible.nodes.DLSDAGStageInData
      properties:
        oid: dba52935c7e444d198b377876b4fe0a8
        target_host: "amdlogin.bsc.es"
        target_path: "/home/bsc44/bsc44070/dls_transfert/data/"
        dls_api_url: "http://134.94.199.73:7001/api/v1"
        dls_api_username: { get_input: dls_api_username }
        dls_api_password: { get_input: dls_api_username }
        dag_id: "taskflow_example"
    StageOutData:
      metadata:
        a4c_edit_x: 247
        a4c_edit_y: "-121"
      type: dls.ansible.nodes.DLSDAGStageOutData
      properties:
        mid: "71e863ac-aee6-4680-a57c-de318530b71e"
        target_host: "amdlogin.bsc.es"
        source_path: "/home/bsc44/bsc44070/dls_transfert/data/"
        dls_api_url: "http://134.94.199.73:7001/api/v1"
        dls_api_username: { get_input: dls_api_username }
        dls_api_password: { get_input: dls_api_password }
        dag_id: "upload_example"
      requirements:
        - dependsOnPyCompsJobFeature:
            type_requirement: dependency
            node: PyCOMPSJob
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
  workflows:
    exec_job:
      inputs:
        user_id:
          type: string
          required: true
        oid:
          type: string
          required: true
        target_path:
          type: string
          required: true
        source_path:
          type: string
          required: true
        num_nodes:
          type: integer
          required: false
          default: 1
      steps:
        DLSDAGStageInData_run:
          target: StageInData
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DLSDAGStageInData_executed
        DLSDAGStageOutData_run:
          target: StageOutData
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - DLSDAGStageOutData_executed
        DLSDAGStageOutData_submit:
          target: StageOutData
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DLSDAGStageOutData_submitted
        DLSDAGStageInData_submitted:
          target: StageInData
          activities:
            - set_state: submitted
          on_success:
            - DLSDAGStageInData_executing
        PyCOMPSJob_submitting:
          target: PyCOMPSJob
          activities:
            - set_state: submitting
          on_success:
            - PyCOMPSJob_submit
        PyCOMPSJob_submit:
          target: PyCOMPSJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - PyCOMPSJob_submitted
        PyCOMPSJob_executing:
          target: PyCOMPSJob
          activities:
            - set_state: executing
          on_success:
            - PyCOMPSJob_run
        DLSDAGStageInData_executing:
          target: StageInData
          activities:
            - set_state: executing
          on_success:
            - DLSDAGStageInData_run
        PyCOMPSJob_executed:
          target: PyCOMPSJob
          activities:
            - set_state: executed
          on_success:
            - DLSDAGStageOutData_submitting
        DLSDAGStageInData_executed:
          target: StageInData
          activities:
            - set_state: executed
          on_success:
            - PyCOMPSJob_submitting
        PyCOMPSJob_submitted:
          target: PyCOMPSJob
          activities:
            - set_state: submitted
          on_success:
            - PyCOMPSJob_executing
        DLSDAGStageOutData_submitted:
          target: StageOutData
          activities:
            - set_state: submitted
          on_success:
            - DLSDAGStageOutData_executing
        DLSDAGStageInData_submitting:
          target: StageInData
          activities:
            - set_state: submitting
          on_success:
            - DLSDAGStageInData_submit
        DLSDAGStageInData_submit:
          target: StageInData
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.submit
          on_success:
            - DLSDAGStageInData_submitted
        DLSDAGStageOutData_submitting:
          target: StageOutData
          activities:
            - set_state: submitting
          on_success:
            - DLSDAGStageOutData_submit
        PyCOMPSJob_run:
          target: PyCOMPSJob
          operation_host: ORCHESTRATOR
          activities:
            - call_operation: tosca.interfaces.node.lifecycle.Runnable.run
          on_success:
            - PyCOMPSJob_executed
        DLSDAGStageOutData_executed:
          target: StageOutData
          activities:
            - set_state: executed
        DLSDAGStageOutData_executing:
          target: StageOutData
          activities:
            - set_state: executing
          on_success:
            - DLSDAGStageOutData_run
